import mensajeria.*
import mensajeros.*
import nuevosPaquetes.*

describe "Test de Mensajeros " {

	var destinoPreferido = brooklyn

	//Métodos auxiliares
	method contratarTodos() {
		mensajeria.contratar(neo)
		mensajeria.contratar(roberto)
		mensajeria.contratar(chuck)
	}
	method destinoPago() {
		paquete.destino(destinoPreferido)
		paquete.pagar()
	}
	
	//Test básico
	test "la mensajeria no tiene mensajeros"{
		assert.equals([],mensajeria.mensajeros())
	}
	
	// Segunda parte
	
	// 1) Contratar a un mensajero
	test "La mensajeria tiene a neo como empleado si lo contrata" {
		mensajeria.contratar(neo)
		assert.that(mensajeria.mensajeros().contains(neo))
	}
	test "la mensajeria no tiene a neo"{
		assert.notThat(mensajeria.mensajeros().contains(neo))
	}

	// 2) Despedir a un mensajero
	test "La mensajeria ya tiene a neo como empleado si lo contrata y lo despide" {
		mensajeria.contratar(neo)
		mensajeria.despedir(neo)
		assert.notThat(mensajeria.mensajeros().contains(neo))
	}

	// 3) Despedir a todos los mensajeros
	test "si la mensajeria tiene mensajeros y se los despide a todos, se queda sin mensajeros"{
		self.contratarTodos()
		mensajeria.despedirATodos()
		assert.equals([],mensajeria.mensajeros())
	}

	// 4) Analizar si la mensajeria es grande 
	test "La mensajeria es grande si contrata a todos "{
		self.contratarTodos()
		assert.that(mensajeria.esGrande())
	}

	test "La mensajeria no es grande si contrata hasta dos mensajeros"{
		mensajeria.contratar(neo)
		mensajeria.contratar(chuck)
		assert.notThat(mensajeria.esGrande())
	}
	
	// 5) El paquete puede ser entregado por el primer empleado
	test "El paquete puede ser entregado por el primer empleado, si es neo y va a brooklyn"{
		mensajeria.contratar(neo)
		mensajeria.contratar(chuck)
		self.destinoPago()
		assert.that(mensajeria.elPrimeroPuedeEntregarlo())
	}
	
	test "El paquete no puede ser entregado por el primer empleado, si es neo y va a la matrix"{
		mensajeria.contratar(neo)
		mensajeria.contratar(chuck)
		destinoPreferido = matrix
		self.destinoPago()
		assert.notThat(mensajeria.elPrimeroPuedeEntregarlo())
	}

	// 6) Peso del último mensajero
	test "El peso del ultimo mensajero es 900, si chuck es el ultimo en contratarse"{
		mensajeria.contratar(neo)
		mensajeria.contratar(chuck)
		assert.equals(900,mensajeria.pesoDelUltimoMensajero())	
	}
	
	test "El peso del ultimo mensajero es 0, si neo es el ultimo en contratarse"{
		mensajeria.contratar(chuck)
		mensajeria.contratar(neo)
		assert.equals(0,mensajeria.pesoDelUltimoMensajero())	
	}
	
	// Tercera parte
	
	
	// 1) Un paquete puede ser entregado

	test "Algun mensajero puede enviar el paquete, si contrata a todos y se paga el paquete"{
		self.contratarTodos()
		self.destinoPago()
		assert.that(mensajeria.algunoPuedeEntregar(paquete))
	}
	
	test "Ningún menajero puede enviar el paquete, si no se lo paga "{
		self.contratarTodos()
		assert.notThat(mensajeria.algunoPuedeEntregar(paquete))
	}
	
	// 2) Los mensajeros que pueden llevar un paquete
	test "Neo y Chuck pueden enviar el paquete, roberto no puede"{
		self.contratarTodos()
		self.destinoPago()
		assert.equals([neo,chuck],mensajeria.quienesPuedenEntregar(paquete))
	}

	//3) Sobrepeso	
	test "La mensajeria tiene Sobrepeso si contrata a todos"{
		self.contratarTodos()
		assert.that(mensajeria.tieneSobrepeso())
	}

	test "La mensajeria no tiene Sobrepeso si se contrata solo a neo"{
		mensajeria.contratar(neo)
		assert.notThat(mensajeria.tieneSobrepeso())
	}
	
	//4) Envio de un paquete	
	test "La mensajeria puede enviar el paquete"{
		self.contratarTodos()
		self.destinoPago()
		mensajeria.enviar(paquete)
		assert.that(mensajeria.enviados().contains(paquete))
		assert.notThat(mensajeria.pendientes().contains(paquete))
	}
	
	test "La mensajeria no puede enviar el paquete, queda pendiente"{
		self.contratarTodos()
		mensajeria.enviar(paquete)
		assert.notThat(mensajeria.enviados().contains(paquete))
		assert.that(mensajeria.pendientes().contains(paquete))
	}
	
	//5) Facturación 	
	test "La facturacion por haber enviado a paquete y paquetin es la suma de sus precios"{
		self.contratarTodos()
		self.destinoPago()
		mensajeria.enviar(paquete)
		mensajeria.enviar(paquetin)
		assert.equals(paquete.precio() + paquetin.precio(), mensajeria.facturacion())
	}
	
	//6) Enviar varios paquetes 	
	test "Se intenta enviar a varios paquetes, algunos quedan pendientes por falta de pago"{
		self.contratarTodos()
		mensajeria.enviarVarios([paquete,paquetin,paqueton])
		assert.that(mensajeria.pendientes().contains(paquete))
		assert.that(mensajeria.pendientes().contains(paqueton))
	}
	
	
	//7) Enviar el paquete pendiente más caro, 
	test "El paqueton sigue pendiente, siendo el pendiente mas caro y habiendo intentado volver a enviarlo "{
		self.contratarTodos()
		mensajeria.enviarVarios([paquete,paquetin,paqueton])
		mensajeria.enviarPendienteMasCaro()
		assert.that(mensajeria.pendientes().contains(paqueton))
	}

	test "El paqueton ya no está pendiente, era el pendiente mas caro, se lo pagó y se volvió a enviar"{
		self.contratarTodos()
		mensajeria.enviarVarios([paquete,paquetin,paqueton])
		paqueton.pagar(200)
		mensajeria.enviarPendienteMasCaro()
		assert.notThat(mensajeria.pendientes().contains(paqueton))
	}

	
	// 9) Nuevo paquete y mensajero
	test "El nuevo paquete no se puede enviar por nadie"{
		self.contratarTodos() 
		assert.notThat(mensajeria.algunoPuedeEntregar(paqueteInventado))
	}
	test "El nuevo mensajero no puede pasar por la matrix ni por brooklyn"{
		assert.notThat(brooklyn.dejarPasar(mensajeroInventado))
		assert.notThat(matrix.dejarPasar(mensajeroInventado))
	}			
}
